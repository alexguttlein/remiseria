TestCase subclass: #AlgoRemisTests	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!AlgoRemisTests methodsFor: 'tests' stamp: 'AG 10/10/2021 21:18'!test03SeCreaUnViajeConDosChoferesRegistradosYElDeMenorValorEsElDeMenorTarifaInicial	| algoRemis viaje valorEsperado |	algoRemis := AlgoRemis new.	algoRemis registrarChoferDeAuto: 'Alex' conTarifaInicial: 300.	algoRemis registrarChoferDeAuto: 'Lu' conTarifaInicial: 200.	algoRemis crearViajeConDestino: 'La Bombonera' aKms: 15 peajes: 1.	viaje := algoRemis viajeMasBaratoParaDestino: 'La Bombonera'.	valorEsperado := 200 + ((viaje getKms) * 50 "precio/km") + ((viaje getPeajes) * 100 "tarifa peaje").	self assert: 'Lu' equals: (viaje chofer).	self assert: valorEsperado equals: (viaje precio).! !!AlgoRemisTests methodsFor: 'tests' stamp: 'AG 10/10/2021 21:19'!test04SeCreaUnViajeConTresChoferesRegistradosYElDeMenorValorEsElDeMenorTarifaInicial	| algoRemis viaje valorEsperado |	algoRemis := AlgoRemis new.	algoRemis registrarChoferDeAuto: 'Alex' conTarifaInicial: 300.	algoRemis registrarChoferDeAuto: 'Shinku' conTarifaInicial: 150.	algoRemis registrarChoferDeAuto: 'Lu' conTarifaInicial: 200.	algoRemis crearViajeConDestino: 'La Bombonera' aKms: 15 peajes: 1.	viaje := algoRemis viajeMasBaratoParaDestino: 'La Bombonera'.	valorEsperado := 150 + ((viaje getKms) * 50 "precio/km") + ((viaje getPeajes) * 100 "tarifa peaje").	self assert: 'Shinku' equals: (viaje chofer).	self assert: valorEsperado equals: (viaje precio).! !!AlgoRemisTests methodsFor: 'tests' stamp: 'AG 10/10/2021 20:48'!test01SeCreaUnViajeYElMenorValorEsElDelChoferDeAuto	| algoRemis viaje valorEsperado |	algoRemis := AlgoRemis new.	algoRemis registrarChoferDeAuto: 'Alex' conTarifaInicial: 300.	algoRemis crearViajeConDestino: 'La Bombonera' aKms: 15 peajes: 1.	viaje := algoRemis viajeMasBaratoParaDestino: 'La Bombonera'.	valorEsperado := 300 + ((viaje getKms) * 50 "precio/km") + ((viaje getPeajes) * 100 "tarifa peaje").	self assert: 'Alex' equals: (viaje chofer).	self assert: valorEsperado equals: (viaje precio).! !!AlgoRemisTests methodsFor: 'tests' stamp: 'AG 10/10/2021 21:22'!test06SeCreaViajeConChoferElectricoDeTarifaAltaYNormalDeTarifaBajaYElMasBaratoEsElNormal	| algoRemis viaje valorEsperado |	algoRemis := AlgoRemis new.	algoRemis registrarChoferDeAuto: 'Alex' conTarifaInicial: 100.	algoRemis registrarChoferDeAutoElectrico: 'Lu' conTarifaInicial: 800.	algoRemis crearViajeConDestino: 'La Bombonera' aKms: 15 peajes: 1.	viaje := algoRemis viajeMasBaratoParaDestino: 'La Bombonera'.	valorEsperado := 100 + ((viaje getKms) * 50 "precio/km") + ((viaje getPeajes) * 100 "tarifa peaje").	self assert: 'Alex' equals: (viaje chofer).	self assert: valorEsperado equals: (viaje precio).! !!AlgoRemisTests methodsFor: 'tests' stamp: 'AG 10/10/2021 21:20'!test05SeCreaUnViajeConDosChoferesComunesYUnoElectricoRegistradosYElDeMenorValorEsElElectrico	| algoRemis viaje valorEsperado |	algoRemis := AlgoRemis new.	algoRemis registrarChoferDeAuto: 'Alex' conTarifaInicial: 300.	algoRemis registrarChoferDeAutoElectrico: 'Shinku' conTarifaInicial: 200.	algoRemis registrarChoferDeAuto: 'Lu' conTarifaInicial: 200.	algoRemis crearViajeConDestino: 'La Bombonera' aKms: 15 peajes: 1.	viaje := algoRemis viajeMasBaratoParaDestino: 'La Bombonera'.	valorEsperado := 200 + ((viaje getKms) * 30 "precio/km") + ((viaje getPeajes) * 50 "tarifa peaje").	self assert: 'Shinku' equals: (viaje chofer).	self assert: valorEsperado equals: (viaje precio).! !!AlgoRemisTests methodsFor: 'tests' stamp: 'AG 10/10/2021 20:56'!test02SeCreaUnViajeYElMenorValorEsElDelChoferDeAutoElectrico	| algoRemis viaje valorEsperado |	algoRemis := AlgoRemis new.	algoRemis registrarChoferDeAuto: 'Alex' conTarifaInicial: 300.	algoRemis registrarChoferDeAutoElectrico: 'Lu' conTarifaInicial: 200.	algoRemis crearViajeConDestino: 'La Bombonera' aKms: 15 peajes: 1.	viaje := algoRemis viajeMasBaratoParaDestino: 'La Bombonera'.	valorEsperado := 200 + ((viaje getKms) * 30 "precio/km") + ((viaje getPeajes) * 50 "tarifa peaje").	self assert: 'Lu' equals: (viaje chofer).	self assert: valorEsperado equals: (viaje precio).! !!AlgoRemisTests methodsFor: 'tests' stamp: 'AG 10/10/2021 21:24'!test07SeCreaUnViajeConDosChoferesElectricosRegistradosYElDeMenorValorEsElDeMenorTarifaInicial	| algoRemis viaje valorEsperado |	algoRemis := AlgoRemis new.	algoRemis registrarChoferDeAutoElectrico: 'Shinku' conTarifaInicial: 150.	algoRemis registrarChoferDeAutoElectrico: 'Lu' conTarifaInicial: 200.	algoRemis crearViajeConDestino: 'La Bombonera' aKms: 15 peajes: 1.	viaje := algoRemis viajeMasBaratoParaDestino: 'La Bombonera'.	valorEsperado := 150 + ((viaje getKms) * 30 "precio/km") + ((viaje getPeajes) * 50 "tarifa peaje").	self assert: 'Shinku' equals: (viaje chofer).	self assert: valorEsperado equals: (viaje precio).! !!AlgoRemisTests methodsFor: 'tests' stamp: 'AG 10/10/2021 22:26'!test08SeCreanDosViajesYElMasBaratoDeAmbosEsElDelAutoElectrico	| algoRemis viajeA viajeB valorEsperadoA valorEsperadoB |	algoRemis := AlgoRemis new.	algoRemis registrarChoferDeAutoElectrico: 'Shinku' conTarifaInicial: 200.	algoRemis registrarChoferDeAuto: 'Lu' conTarifaInicial: 200.	algoRemis crearViajeConDestino: 'Una Casa' aKms: 15 peajes: 1.	algoRemis crearViajeConDestino: 'Otra Casa' aKms: 15 peajes: 1.	viajeA := algoRemis viajeMasBaratoParaDestino: 'Otra Casa'.	viajeB := algoRemis viajeMasBaratoParaDestino: 'Una Casa'.	valorEsperadoA := 200 + ((viajeA getKms) * 30 "$/km") + ((viajeA getPeajes) * 50 "$/peaje").	valorEsperadoB := 200 + ((viajeA getKms) * 30 "$/km") + ((viajeA getPeajes) * 50 "$/peaje").	self assert: 'Shinku' equals: (viajeA chofer).	self assert: valorEsperadoA equals: (viajeA precio).	self assert: 'Shinku' equals: (viajeB chofer).	self assert: valorEsperadoB equals: (viajeB precio).! !!AlgoRemisTests methodsFor: 'tests' stamp: 'AG 10/11/2021 11:26'!test09SeCreaUnViajePeroNoExistenChoferesPorLoQueLanzaExcepcionChoferNoEncontrado	|algoRemis|	algoRemis := AlgoRemis new.	algoRemis crearViajeConDestino: 'La Bombonera' aKms: 15 peajes: 1.		self should: [ algoRemis viajeMasBaratoParaDestino: 'La Bombonera' ] raise: ChoferNoEncontradoError ! !TestCase subclass: #ChoferAutoElectricoTest	instanceVariableNames: 'unViaje'	classVariableNames: ''	package: 'TP1-Tests'!!ChoferAutoElectricoTest methodsFor: 'running' stamp: 'AG 10/10/2021 19:56'!setUp	unViaje := Viaje new.	unViaje crearViajeConDestino: 'La Bombonera' aKms: 15 peajes: 1.! !!ChoferAutoElectricoTest methodsFor: 'tests' stamp: 'AG 10/10/2021 20:07'!test01SeCreaUnChoferConTarifaInicial500		|unChofer unaTarifaBase|	unChofer := ChoferAutoElectrico new.	unChofer setNombre: 'Alex'.	unChofer setTarifa: 500.		unaTarifaBase := (unChofer precio) getTarifaBase.		self assert: unaTarifaBase equals: 500.! !!ChoferAutoElectricoTest methodsFor: 'tests' stamp: 'AG 10/10/2021 20:07'!test02SeCreaUnChoferConTarifaInicial500YSuTarifaEnUnViajeEs1150		|unChofer tarifaDeViaje|	unChofer := ChoferAuto new.	unChofer setNombre: 'Alex'.	unChofer setTarifa: 300.	tarifaDeViaje := unChofer calcularTarifaDe: unViaje.			self assert: tarifaDeViaje equals: 1150.! !TestCase subclass: #ChoferAutoTest	instanceVariableNames: 'unViaje'	classVariableNames: ''	package: 'TP1-Tests'!!ChoferAutoTest methodsFor: 'running' stamp: 'AG 10/10/2021 19:53'!setUp	unViaje := Viaje new.	unViaje crearViajeConDestino: 'La Bombonera' aKms: 15 peajes: 1.! !!ChoferAutoTest methodsFor: 'tests' stamp: 'AG 10/10/2021 19:43'!test01SeCreaUnChoferConTarifaInicial500		|unChofer unaTarifaBase|	unChofer := ChoferAuto new.	unChofer setNombre: 'Alex'.	unChofer setTarifa: 500.		unaTarifaBase := (unChofer precio) getTarifaBase.		self assert: unaTarifaBase equals: 500.! !!ChoferAutoTest methodsFor: 'tests' stamp: 'AG 10/10/2021 19:54'!test02SeCreaUnChoferConTarifaInicial500YSuTarifaEnUnViajeEs1150		|unChofer tarifaDeViaje|	unChofer := ChoferAuto new.	unChofer setNombre: 'Alex'.	unChofer setTarifa: 300.	tarifaDeViaje := unChofer calcularTarifaDe: unViaje.			self assert: tarifaDeViaje equals: 1150.! !TestCase subclass: #ViajeTest	instanceVariableNames: 'unChoferAuto unChoferAutoElectrico'	classVariableNames: ''	package: 'TP1-Tests'!!ViajeTest methodsFor: 'running' stamp: 'AG 10/10/2021 20:14'!setUp	unChoferAuto := ChoferAuto new.	unChoferAuto setNombre: 'Alex'.	unChoferAuto setTarifa: 300.		unChoferAutoElectrico := ChoferAutoElectrico new.	unChoferAutoElectrico setNombre: 'Lu'.	unChoferAutoElectrico setTarifa: 200.! !!ViajeTest methodsFor: 'tests' stamp: 'AG 10/10/2021 20:36'!test01SeCreaUnViajeConDestinoNormalYSuTarifaEsLaEsperada	|unViaje tarifaEsperada|	unViaje := Viaje new.	unViaje crearViajeConDestino: 'Casa' aKms: 10 peajes: 1.	tarifaEsperada := 300 "tarifa inicial" + ((unViaje getKms) * 50 ) + ((unViaje getPeajes) * 100).		self assert: tarifaEsperada equals: 900.! !!ViajeTest methodsFor: 'tests' stamp: 'AG 10/10/2021 21:14'!test04SeCreaUnViajeConDestinoHospitalYSeValidaQueLaTarifaTengaDescuento	|unViaje|	unViaje := Viaje new.	unViaje crearViajeConDestino: 'Vamos al Hospital' aKms: 10 peajes: 1.	self assert: (unViaje getDescuento tieneDescuento)! !!ViajeTest methodsFor: 'tests' stamp: 'AG 10/10/2021 21:14'!test03SeCreaUnViajeConDestinoNormalYSeValidaQueNoHayaDescuentoAplicado	|unViaje|	unViaje := Viaje new.	unViaje crearViajeConDestino: 'Casa' aKms: 10 peajes: 1.	self deny: (unViaje getDescuento tieneDescuento)! !!ViajeTest methodsFor: 'tests' stamp: 'AG 10/10/2021 21:12'!test02SeCreaUnViajeConDestinoHospitalYSeAplicaDescuentoALaTarifa	|unViaje tarifaEsperada|	unViaje := Viaje new.	unViaje crearViajeConDestino: 'Vamos al Hospital' aKms: 10 peajes: 1.	tarifaEsperada := (unViaje getDescuento valor) * (300 "tarifa inicial" + ((unViaje getKms) * 50 ) + ((unViaje getPeajes) * 100)).		self assert: tarifaEsperada equals: 180.! !TestCase subclass: #ViajesTest	instanceVariableNames: 'viajes'	classVariableNames: ''	package: 'TP1-Tests'!!ViajesTest methodsFor: 'running' stamp: 'AG 10/10/2021 22:50'!setUp	viajes := Viajes new.! !!ViajesTest methodsFor: 'tests' stamp: 'AG 10/10/2021 23:00'!test03SeCreaUnViajeConDescuentoYSeLoBusca	|unViaje|	viajes crearViajeConDestino: 'Brookhaven Hospital' aKms: 10 peajes: 2.	unViaje := viajes obtenerViaje: 'Brookhaven Hospital'.	self assert: unViaje getDescuento tieneDescuento.	! !!ViajesTest methodsFor: 'tests' stamp: 'AG 10/10/2021 22:54'!test01SeCreaUnViajeYSeLoBusca	|unViaje|	viajes crearViajeConDestino: 'Casa' aKms: 10 peajes: 2.	unViaje := viajes obtenerViaje: 'Casa'.		self assert: unViaje getDestino equals: 'Casa'.	self assert: unViaje getKms equals: 10.	self assert: unViaje getPeajes equals: 2.	self deny: unViaje getDescuento tieneDescuento.	! !!ViajesTest methodsFor: 'tests' stamp: 'AG 10/10/2021 22:56'!test02SeCreanTresViajesYSeBuscaUnoEspecifico	|unViaje|	viajes crearViajeConDestino: 'Una Casa' aKms: 50 peajes: 1.	viajes crearViajeConDestino: 'Otra Casa' aKms: 4 peajes: 2.	viajes crearViajeConDestino: 'Otra Casa Mas' aKms: 100 peajes: 0.	unViaje := viajes obtenerViaje: 'Otra Casa'.		self assert: unViaje getDestino equals: 'Otra Casa'.	self assert: unViaje getKms equals: 4.	self assert: unViaje getPeajes equals: 2.	self deny: unViaje getDescuento tieneDescuento.	! !!ViajesTest methodsFor: 'tests' stamp: 'AG 10/10/2021 23:01'!test04SeCreanTresViajesYSeBuscaElQueTieneDescuento	|unViaje|	viajes crearViajeConDestino: 'Una Casa' aKms: 50 peajes: 1.	viajes crearViajeConDestino: 'Otra Casa' aKms: 4 peajes: 2.	viajes crearViajeConDestino: 'Brookhaven Hospital' aKms: 100 peajes: 8.	unViaje := viajes obtenerViaje: 'Brookhaven Hospital'.		self assert: unViaje getDestino equals: 'Brookhaven Hospital'.	self assert: unViaje getKms equals: 100.	self assert: unViaje getPeajes equals: 8.	self assert: unViaje getDescuento tieneDescuento.	! !!ViajesTest methodsFor: 'tests' stamp: 'AG 10/11/2021 11:12'!test05SeCreanDosViajesYSeBuscaUnoInexistenteLanzandoError	viajes crearViajeConDestino: 'Una Casa' aKms: 50 peajes: 1.	viajes crearViajeConDestino: 'Otra Casa' aKms: 4 peajes: 2.		self should: [ viajes obtenerViaje: 'La Casa' ] raise: DestinoNoEncontradoError! !!ViajesTest methodsFor: 'tests' stamp: 'AG 10/11/2021 11:14'!test05SeCreanDosViajesYSeBuscaUnoInexistenteLanzandoExcepcionDestinoNoEncontrado	viajes crearViajeConDestino: 'Una Casa' aKms: 50 peajes: 1.	viajes crearViajeConDestino: 'Otra Casa' aKms: 4 peajes: 2.		self should: [ viajes obtenerViaje: 'La Casa' ] raise: DestinoNoEncontradoError! !